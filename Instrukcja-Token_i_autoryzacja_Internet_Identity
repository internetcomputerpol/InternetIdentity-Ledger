# Połączenie Internet Identity z Tokenem ICRC-1 na lokalnej replice

## 📌 Opis

Ten przewodnik opisuje sposób integracji Internet Identity z tokenem utworzonym na lokalnej replice (ICRC-1). DApp pozwala na logowanie za pomocą lokalnego Internet Identity, a następnie wykonywanie transferów tokena do innych użytkowników posiadających Internet Identity.

### 📜 Schemat działania:
- Internet Identity **l3uwz-kk4se-(...)** przelewa **500 Tokenów XYZ** do Internet Identity **7d5uu-nagqm-(...)**.
- Wszystko odbywa się w aplikacji DApp stworzonej w **Vue.js**, która obsługuje sesję Internet Identity na frontendzie.

---

## 🛠 Instrukcja

### 1️⃣ Tworzenie Identity
Najpierw tworzymy dwie identity: `capo` oraz `boss`.

```sh
# Tworzenie identity
$ dfx identity new capo  # Konto posiadające i rozdające tokeny
$ dfx identity new boss  # Konto do mintowania i spalania (burn) tokenów
```

### 2️⃣ Logowanie do Identity `capo`

```sh
$ dfx identity use capo
```

### 3️⃣ Uruchamianie skryptu `tokenic.sh`

📌 Skrypt oraz inne pomocne narzędzia znajdują się tutaj:
🔗 [GitHub - TokenIC](https://github.com/internetcomputerpol/TokenIC)

Po uruchomieniu skryptu:
- Wybieramy **boss** jako konto mintujące.
- Wybieramy **capo** jako konto do przelewu całości tokenów.

Po zatwierdzeniu otrzymujemy **kanister z tokenem** na lokalnej replice. **Kontrolerem kanistra jest `capo`.**

### 4️⃣ Tworzenie nowego projektu DApp

Otwieramy nowy terminal i upewniamy się, że używamy identity `capo`:

```sh
$ dfx identity whoami
# Jeśli nie jesteśmy zalogowani jako capo:
$ dfx identity use capo
```

Następnie tworzymy nowy projekt:

```sh
$ dfx new fillia
```

✅ Wybieramy:
- **Motoko** jako backend.
- **Vue.js** jako frontend.
- **Internet Identity** jako opcję logowania `[v]`.

### 5️⃣ Tworzenie Internet Identity

Przechodzimy do lokalnego kanistra **Internet Identity** i tworzymy kilka nowych kont **II**.

---

🚀 **Kontynuacja w kolejnych krokach...**

